steps:
  # use Buildpacks to create a container image
  - name: "gcr.io/k8s-skaffold/pack"
    dir: "app/"
    entrypoint: "pack"
    args:
      [
        "build",
        "--builder=gcr.io/buildpacks/builder",
        "${_GCP_REGION}-docker.pkg.dev/${_GCP_PROJECT}/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}",
      ]

  #pushing to artifact registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "push",
        "${_GCP_REGION}-docker.pkg.dev/${_GCP_PROJECT}/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}",
      ]

  # Run a vulnerability scan at _SECURITY level
  - id: Vulnerability scan
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud artifacts docker images scan \
        ${_GCP_REGION}-docker.pkg.dev/${_GCP_PROJECT}/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA} \
        --remote --location europe \
        --format="value(response.scan)" > /workspace/scan_id.txt

  # Analyze the result of the scan
  - id: Check vulnerabilities severity
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
        --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq ${_SEVERITY}; \
        then echo "Failed vulnerability check for ${_SEVERITY} level" && exit 1; else echo "No ${_SEVERITY} vulnerability found, congrats !" && exit 0; fi

  # Push to Cloud Deploy _DEPLOY_PIPELINE if successful
  - name: "gcr.io/cloud-builders/gcloud"
    dir: "build/cloud-deploy/cloudrun-deploy"
    args:
      [
        "deploy",
        "releases",
        "create",
        "cloud-run-release-${SHORT_SHA}",
        "--region",
        "${_GCP_REGION}",
        "--delivery-pipeline",
        "${_DEPLOY_PIPELINE}",
        "--annotations",
        "commitID=${REVISION_ID}",
        "--images",
        "run-container=${_GCP_REGION}-docker.pkg.dev/${_GCP_PROJECT}/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}",
      ]

images:
  - ${_GCP_REGION}-docker.pkg.dev/${_GCP_PROJECT}/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}
